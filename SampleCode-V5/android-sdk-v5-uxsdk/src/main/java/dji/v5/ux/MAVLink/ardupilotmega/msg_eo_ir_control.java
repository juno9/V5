/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE EO_IR_CONTROL PACKING
package dji.v5.ux.MAVLink.ardupilotmega;
import dji.v5.ux.MAVLink.MAVLinkPacket;
import dji.v5.ux.MAVLink.Messages.MAVLinkMessage;
import dji.v5.ux.MAVLink.Messages.MAVLinkPayload;
        
/**
* EO/IR camera control settings.
*/
public class msg_eo_ir_control extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_EO_IR_CONTROL = 12006;
    public static final int MAVLINK_MSG_ID_EO_IR_CONTROL_CRC = 215;
    public static final int MAVLINK_MSG_LENGTH = 20;
    private static final long serialVersionUID = MAVLINK_MSG_ID_EO_IR_CONTROL;


      
    /**
    * EO/IR Camera Header1
    */
    public short header1;
      
    /**
    * EO/IR Camera Header2
    */
    public short header2;
      
    /**
    * EO/IR Camera Header3
    */
    public short header3;
      
    /**
    * Bitmap of EO/IR Camera Mode Control flags.
    */
    public short mode_type;
      
    /**
    * Bitmap of EO/IR Camera Thermal NUC flags.
    */
    public short thermal_nuc_type;
      
    /**
    * Bitmap of EO/IR Camera Thermal Control flags.
    */
    public short thermal_control_type;
      
    /**
    * Bitmap of EO/IR Camera Zoom Control flags.
    */
    public short zoom_type;
      
    /**
    * Bitmap of EO/IR Camera Record Control flags.
    */
    public short record_type;
      
    /**
    * Bitmap of EO/IR Camera Channel Mode Control flags.
    */
    public short channel_mode_type;
      
    /**
    * Reserved1
    */
    public short reserved1;
      
    /**
    * Reserved2
    */
    public short reserved2;
      
    /**
    * EO/IR Camera PAN/TILT Rate LSB([0:1 bits] - Tilt Rate LSB[1:0], [2:3 bits] - Pan Rate LSB[1:0])
    */
    public short pan_tilt_rate_lsb;
      
    /**
    * Reserved3
    */
    public short reserved3;
      
    /**
    * Reserved4
    */
    public short reserved4;
      
    /**
    * Reserved5
    */
    public short reserved5;
      
    /**
    * Reserved6
    */
    public short reserved6;
      
    /**
    * EO/IR Camera TILT Rate MSB
    */
    public short tilt_rate_msb;
      
    /**
    * EO/IR Camera PAN Rate MSB
    */
    public short pan_rate_msb;
      
    /**
    * Reserved7
    */
    public short reserved7;
      
    /**
    * EO/IR Control CRC
    */
    public short eo_ir_ctrol_crc;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_EO_IR_CONTROL;
        packet.crc_extra = MAVLINK_MSG_ID_EO_IR_CONTROL_CRC;
              
        packet.payload.putUnsignedByte(header1);
              
        packet.payload.putUnsignedByte(header2);
              
        packet.payload.putUnsignedByte(header3);
              
        packet.payload.putUnsignedByte(mode_type);
              
        packet.payload.putUnsignedByte(thermal_nuc_type);
              
        packet.payload.putUnsignedByte(thermal_control_type);
              
        packet.payload.putUnsignedByte(zoom_type);
              
        packet.payload.putUnsignedByte(record_type);
              
        packet.payload.putUnsignedByte(channel_mode_type);
              
        packet.payload.putUnsignedByte(reserved1);
              
        packet.payload.putUnsignedByte(reserved2);
              
        packet.payload.putUnsignedByte(pan_tilt_rate_lsb);
              
        packet.payload.putUnsignedByte(reserved3);
              
        packet.payload.putUnsignedByte(reserved4);
              
        packet.payload.putUnsignedByte(reserved5);
              
        packet.payload.putUnsignedByte(reserved6);
              
        packet.payload.putUnsignedByte(tilt_rate_msb);
              
        packet.payload.putUnsignedByte(pan_rate_msb);
              
        packet.payload.putUnsignedByte(reserved7);
              
        packet.payload.putUnsignedByte(eo_ir_ctrol_crc);
        
        return packet;
    }

    /**
    * Decode a eo_ir_control message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.header1 = payload.getUnsignedByte();
              
        this.header2 = payload.getUnsignedByte();
              
        this.header3 = payload.getUnsignedByte();
              
        this.mode_type = payload.getUnsignedByte();
              
        this.thermal_nuc_type = payload.getUnsignedByte();
              
        this.thermal_control_type = payload.getUnsignedByte();
              
        this.zoom_type = payload.getUnsignedByte();
              
        this.record_type = payload.getUnsignedByte();
              
        this.channel_mode_type = payload.getUnsignedByte();
              
        this.reserved1 = payload.getUnsignedByte();
              
        this.reserved2 = payload.getUnsignedByte();
              
        this.pan_tilt_rate_lsb = payload.getUnsignedByte();
              
        this.reserved3 = payload.getUnsignedByte();
              
        this.reserved4 = payload.getUnsignedByte();
              
        this.reserved5 = payload.getUnsignedByte();
              
        this.reserved6 = payload.getUnsignedByte();
              
        this.tilt_rate_msb = payload.getUnsignedByte();
              
        this.pan_rate_msb = payload.getUnsignedByte();
              
        this.reserved7 = payload.getUnsignedByte();
              
        this.eo_ir_ctrol_crc = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_eo_ir_control(){
        msgid = MAVLINK_MSG_ID_EO_IR_CONTROL;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_eo_ir_control(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_EO_IR_CONTROL;
        unpack(mavLinkPacket.payload);
    }

                                            
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_EO_IR_CONTROL - sysid:"+sysid+" compid:"+compid+" header1:"+header1+" header2:"+header2+" header3:"+header3+" mode_type:"+mode_type+" thermal_nuc_type:"+thermal_nuc_type+" thermal_control_type:"+thermal_control_type+" zoom_type:"+zoom_type+" record_type:"+record_type+" channel_mode_type:"+channel_mode_type+" reserved1:"+reserved1+" reserved2:"+reserved2+" pan_tilt_rate_lsb:"+pan_tilt_rate_lsb+" reserved3:"+reserved3+" reserved4:"+reserved4+" reserved5:"+reserved5+" reserved6:"+reserved6+" tilt_rate_msb:"+tilt_rate_msb+" pan_rate_msb:"+pan_rate_msb+" reserved7:"+reserved7+" eo_ir_ctrol_crc:"+eo_ir_ctrol_crc+"";
    }
}
        